# generated by datamodel-codegen:
#   filename:  compose-spec.json
#   timestamp: 2025-04-29T01:23:17+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, ConfigDict, Field, RootModel


class Cgroup(Enum):
    host = "host"
    private = "private"


class CpuCount(RootModel[int]):
    root: int = Field(..., ge=0)


class CpuPercent(RootModel[int]):
    root: int = Field(..., ge=0, le=100)


class CredentialSpec(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    config: Optional[str] = None
    file: Optional[str] = None
    registry: Optional[str] = None


class Condition(Enum):
    service_started = "service_started"
    service_healthy = "service_healthy"
    service_completed_successfully = "service_completed_successfully"


class DependsOn(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    restart: Optional[Union[bool, str]] = None
    required: Optional[bool] = True
    condition: Condition


class Devices(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    source: str
    target: Optional[str] = None
    permissions: Optional[str] = None


class Extends(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    service: str
    file: Optional[str] = None


class Provider(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Optional[str] = None
    options: Optional[Dict[str, Optional[Union[str, float]]]] = None


class Logging(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    driver: Optional[str] = None
    options: Optional[Dict[str, Optional[Union[str, float]]]] = None


class OomScoreAdj(RootModel[int]):
    root: int = Field(..., ge=-1000, le=1000)


class Ports(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    name: Optional[str] = None
    mode: Optional[str] = None
    host_ip: Optional[str] = None
    target: Optional[Union[int, str]] = None
    published: Optional[Union[str, int]] = None
    protocol: Optional[str] = None
    app_protocol: Optional[str] = None


class Type(Enum):
    bind = "bind"
    volume = "volume"
    tmpfs = "tmpfs"
    cluster = "cluster"
    npipe = "npipe"
    image = "image"


class Recursive(Enum):
    enabled = "enabled"
    disabled = "disabled"
    writable = "writable"
    readonly = "readonly"


class Selinux(Enum):
    z = "z"
    Z = "Z"


class Bind(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    propagation: Optional[str] = None
    create_host_path: Optional[Union[bool, str]] = None
    recursive: Optional[Recursive] = None
    selinux: Optional[Selinux] = None


class Size(RootModel[int]):
    root: int = Field(..., ge=0)


class Tmpfs(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    size: Optional[Union[Size, str]] = None
    mode: Optional[Union[float, str]] = None


class Image(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    subpath: Optional[str] = None


class Healthcheck(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    disable: Optional[Union[bool, str]] = None
    interval: Optional[str] = None
    retries: Optional[Union[float, str]] = None
    test: Optional[Union[str, List[str]]] = None
    timeout: Optional[str] = None
    start_period: Optional[str] = None
    start_interval: Optional[str] = None


class Action(Enum):
    rebuild = "rebuild"
    sync = "sync"
    restart = "restart"
    sync_restart = "sync+restart"
    sync_exec = "sync+exec"


class Order(Enum):
    start_first = "start-first"
    stop_first = "stop-first"


class RollbackConfig(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    parallelism: Optional[Union[int, str]] = None
    delay: Optional[str] = None
    failure_action: Optional[str] = None
    monitor: Optional[str] = None
    max_failure_ratio: Optional[Union[float, str]] = None
    order: Optional[Order] = None


class UpdateConfig(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    parallelism: Optional[Union[int, str]] = None
    delay: Optional[str] = None
    failure_action: Optional[str] = None
    monitor: Optional[str] = None
    max_failure_ratio: Optional[Union[float, str]] = None
    order: Optional[Order] = None


class Limits(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    cpus: Optional[Union[float, str]] = None
    memory: Optional[str] = None
    pids: Optional[Union[int, str]] = None


class RestartPolicy(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    condition: Optional[str] = None
    delay: Optional[str] = None
    max_attempts: Optional[Union[int, str]] = None
    window: Optional[str] = None


class Preference(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    spread: Optional[str] = None


class Placement(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    constraints: Optional[List[str]] = None
    preferences: Optional[List[Preference]] = None
    max_replicas_per_node: Optional[Union[int, str]] = None


class DiscreteResourceSpec(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    kind: Optional[str] = None
    value: Optional[Union[float, str]] = None


class GenericResource(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    discrete_resource_spec: Optional[DiscreteResourceSpec] = None


class GenericResources(RootModel[List[GenericResource]]):
    root: List[GenericResource]


class Gpus1(Enum):
    all = "all"


class ConfigItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    subnet: Optional[str] = None
    ip_range: Optional[str] = None
    gateway: Optional[str] = None
    aux_addresses: Optional[Dict[str, str]] = None


class Ipam(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    driver: Optional[str] = None
    config: Optional[List[ConfigItem]] = None
    options: Optional[Dict[str, str]] = None


class ExternalVolumeNetwork(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    name: Optional[str] = None


class ExternalConfig(BaseModel):
    name: Optional[str] = None


class Command(RootModel[Optional[Union[str, List[str]]]]):
    root: Optional[Union[str, List[str]]]


class EnvFilePath(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    path: str
    format: Optional[str] = None
    required: Optional[Union[bool, str]] = True


class EnvFile(RootModel[Union[str, List[Union[str, EnvFilePath]]]]):
    root: Union[str, List[Union[str, EnvFilePath]]]


class LabelFile(RootModel[Union[str, List[str]]]):
    root: Union[str, List[str]]


class ListOfStrings(RootModel[List[str]]):
    root: List[str]


class ListOrDict1(RootModel[List[Any]]):
    root: List[Any]


class ListOrDict(RootModel[Union[Dict[str, Optional[Union[str, float, bool]]], ListOrDict1]]):
    root: Union[Dict[str, Optional[Union[str, float, bool]]], ListOrDict1]


class ExtraHosts1(RootModel[List[Any]]):
    root: List[Any]


class ExtraHosts(RootModel[Union[Dict[str, Union[str, ExtraHosts1]], ExtraHosts1]]):
    root: Union[Dict[str, Union[str, ExtraHosts1]], ExtraHosts1]


class BlkioLimit(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    path: Optional[str] = None
    rate: Optional[Union[int, str]] = None


class BlkioWeight(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    path: Optional[str] = None
    weight: Optional[Union[int, str]] = None


class ServiceConfigOrSecret1(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    source: Optional[str] = None
    target: Optional[str] = None
    uid: Optional[str] = None
    gid: Optional[str] = None
    mode: Optional[Union[float, str]] = None


class ServiceConfigOrSecret(RootModel[List[Union[str, ServiceConfigOrSecret1]]]):
    root: List[Union[str, ServiceConfigOrSecret1]]


class Ulimits1(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    hard: Union[int, str]
    soft: Union[int, str]


class Ulimits(RootModel[Dict[str, Union[Union[int, str], Ulimits1]]]):
    root: Dict[str, Union[Union[int, str], Ulimits1]]


class Build(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    context: Optional[str] = Field(None, description="The context used for building the image")
    dockerfile: Optional[str] = Field(None, description="The Dockerfile used for building the image")
    dockerfile_inline: Optional[str] = None
    entitlements: Optional[List[str]] = None
    args: Optional[ListOrDict] = Field(None, description="Arguments used during the image build process")
    ssh: Optional[ListOrDict] = None
    labels: Optional[ListOrDict] = None
    cache_from: Optional[List[str]] = None
    cache_to: Optional[List[str]] = None
    no_cache: Optional[Union[bool, str]] = None
    additional_contexts: Optional[ListOrDict] = None
    network: Optional[str] = None
    pull: Optional[Union[bool, str]] = None
    target: Optional[str] = None
    shm_size: Optional[Union[int, str]] = None
    extra_hosts: Optional[ExtraHosts] = None
    isolation: Optional[str] = None
    privileged: Optional[Union[bool, str]] = None
    secrets: Optional[ServiceConfigOrSecret] = None
    tags: Optional[List[str]] = None
    ulimits: Optional[Ulimits] = None
    platforms: Optional[List[str]] = None


class BlkioConfig(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    device_read_bps: Optional[List[BlkioLimit]] = None
    device_read_iops: Optional[List[BlkioLimit]] = None
    device_write_bps: Optional[List[BlkioLimit]] = None
    device_write_iops: Optional[List[BlkioLimit]] = None
    weight: Optional[Union[int, str]] = None
    weight_device: Optional[List[BlkioWeight]] = None


class Networks(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    aliases: Optional[ListOfStrings] = None
    interface_name: Optional[str] = None
    ipv4_address: Optional[str] = None
    ipv6_address: Optional[str] = None
    link_local_ips: Optional[ListOfStrings] = None
    mac_address: Optional[str] = None
    driver_opts: Optional[Dict[str, Union[str, float]]] = None
    priority: Optional[float] = None
    gw_priority: Optional[float] = None


class AdditionalVolumeOption(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    labels: Optional[ListOrDict] = None
    nocopy: Optional[Union[bool, str]] = None
    subpath: Optional[str] = None


class Volumes(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Type
    source: Optional[str] = None
    target: Optional[str] = None
    read_only: Optional[Union[bool, str]] = None
    consistency: Optional[str] = None
    bind: Optional[Bind] = None
    volume: Optional[AdditionalVolumeOption] = None
    tmpfs: Optional[Tmpfs] = None
    image: Optional[Image] = None


class Device(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    capabilities: ListOfStrings
    count: Optional[Union[str, int]] = None
    device_ids: Optional[ListOfStrings] = None
    driver: Optional[str] = None
    options: Optional[ListOrDict] = None


class DevicesModel(RootModel[List[Device]]):
    model_config = ConfigDict(
        extra="forbid",
    )
    root: List[Device]


class Gpu(BaseModel):
    capabilities: Optional[ListOfStrings] = None
    count: Optional[Union[str, int]] = None
    device_ids: Optional[ListOfStrings] = None
    driver: Optional[str] = None
    options: Optional[ListOrDict] = None


class Gpus(RootModel[Union[Gpus1, List[Gpu]]]):
    root: Union[Gpus1, List[Gpu]]


class Network(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    name: Optional[str] = None
    driver: Optional[str] = Field(None, description="The driver used for this network")
    driver_opts: Optional[Dict[str, Union[str, float]]] = None
    ipam: Optional[Ipam] = None
    external: Optional[Union[bool, ExternalVolumeNetwork]] = None
    internal: Optional[Union[bool, str]] = None
    enable_ipv4: Optional[Union[bool, str]] = None
    enable_ipv6: Optional[Union[bool, str]] = None
    attachable: Optional[Union[bool, str]] = None
    labels: Optional[ListOrDict] = None


class Volume(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    name: Optional[str] = None
    driver: Optional[str] = Field(None, description="The driver used for this volume")
    driver_opts: Optional[Dict[str, Union[str, float]]] = None
    external: Optional[Union[bool, ExternalVolumeNetwork]] = None
    labels: Optional[ListOrDict] = None


class Secret(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    name: Optional[str] = None
    environment: Optional[str] = None
    file: Optional[str] = None
    external: Optional[Union[bool, ExternalConfig]] = None
    labels: Optional[ListOrDict] = None
    driver: Optional[str] = None
    driver_opts: Optional[Dict[str, Union[str, float]]] = None
    template_driver: Optional[str] = None


class Config(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    name: Optional[str] = None
    content: Optional[str] = None
    environment: Optional[str] = None
    file: Optional[str] = None
    external: Optional[Union[bool, ExternalConfig]] = None
    labels: Optional[ListOrDict] = None
    template_driver: Optional[str] = None


class ServiceHook(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    command: Command
    user: Optional[str] = None
    privileged: Optional[Union[bool, str]] = None
    working_dir: Optional[str] = None
    environment: Optional[ListOrDict] = None


class StringOrList(RootModel[Union[str, ListOfStrings]]):
    root: Union[str, ListOfStrings]


class WatchItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    ignore: Optional[StringOrList] = None
    include: Optional[StringOrList] = None
    path: str
    action: Action
    target: Optional[str] = None
    exec: Optional[ServiceHook] = None


class Development(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    watch: Optional[List[WatchItem]] = None


class Reservations(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    cpus: Optional[Union[float, str]] = None
    memory: Optional[str] = None
    generic_resources: Optional[GenericResources] = None
    devices: Optional[DevicesModel] = None


class Resources(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    limits: Optional[Limits] = None
    reservations: Optional[Reservations] = None


class Deployment(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    mode: Optional[str] = None
    endpoint_mode: Optional[str] = None
    replicas: Optional[Union[int, str]] = None
    labels: Optional[ListOrDict] = None
    rollback_config: Optional[RollbackConfig] = None
    update_config: Optional[UpdateConfig] = None
    resources: Optional[Resources] = None
    restart_policy: Optional[RestartPolicy] = None
    placement: Optional[Placement] = None


class Include1(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    path: Optional[StringOrList] = None
    env_file: Optional[StringOrList] = None
    project_directory: Optional[str] = None


class Include(RootModel[Union[str, Include1]]):
    root: Union[str, Include1]


class Service(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    develop: Optional[Development] = None
    deploy: Optional[Deployment] = None
    annotations: Optional[ListOrDict] = None
    attach: Optional[Union[bool, str]] = None
    build: Optional[Union[str, Build]] = None
    blkio_config: Optional[BlkioConfig] = None
    cap_add: Optional[List[str]] = None
    cap_drop: Optional[List[str]] = None
    cgroup: Optional[Cgroup] = None
    cgroup_parent: Optional[str] = None
    command: Optional[Command] = Field(None, description="The command that will be run in the container")
    configs: Optional[ServiceConfigOrSecret] = None
    container_name: Optional[str] = Field(None, description="The name that will be given to the container")
    cpu_count: Optional[Union[str, CpuCount]] = None
    cpu_percent: Optional[Union[str, CpuPercent]] = None
    cpu_shares: Optional[Union[float, str]] = None
    cpu_quota: Optional[Union[float, str]] = None
    cpu_period: Optional[Union[float, str]] = None
    cpu_rt_period: Optional[Union[float, str]] = None
    cpu_rt_runtime: Optional[Union[float, str]] = None
    cpus: Optional[Union[float, str]] = None
    cpuset: Optional[str] = None
    credential_spec: Optional[CredentialSpec] = None
    depends_on: Optional[Union[ListOfStrings, Dict[str, DependsOn]]] = Field(
        None,
        description="Other services that this service depends on, which will be started before this one",
    )
    device_cgroup_rules: Optional[ListOfStrings] = None
    devices: Optional[List[Union[str, Devices]]] = None
    dns: Optional[StringOrList] = None
    dns_opt: Optional[List[str]] = None
    dns_search: Optional[StringOrList] = None
    domainname: Optional[str] = None
    entrypoint: Optional[Command] = Field(None, description="The entrypoint to the application in the container")
    env_file: Optional[EnvFile] = Field(
        None, description="Files containing environment variables that will be included"
    )
    label_file: Optional[LabelFile] = None
    environment: Optional[ListOrDict] = Field(None, description="Environment variables that will be included")
    expose: Optional[List[Union[str, float]]] = Field(
        None,
        description="Ports exposed to the other services but not to the host machine",
    )
    extends: Optional[Union[str, Extends]] = None
    provider: Optional[Provider] = None
    external_links: Optional[List[str]] = None
    extra_hosts: Optional[ExtraHosts] = None
    gpus: Optional[Gpus] = None
    group_add: Optional[List[Union[str, float]]] = None
    healthcheck: Optional[Healthcheck] = Field(None, description="A command for checking if the container is healthy")
    hostname: Optional[str] = None
    image: Optional[str] = Field(
        None,
        description="The image that will be pulled for the service. If `build` is specified, the built image will be given this tag.",
    )
    init: Optional[Union[bool, str]] = None
    ipc: Optional[str] = None
    isolation: Optional[str] = None
    labels: Optional[ListOrDict] = Field(None, description="Labels that will be given to the container")
    links: Optional[List[str]] = None
    logging: Optional[Logging] = Field(None, description="Settings for logging for this service")
    mac_address: Optional[str] = None
    mem_limit: Optional[Union[float, str]] = None
    mem_reservation: Optional[Union[str, int]] = None
    mem_swappiness: Optional[Union[int, str]] = None
    memswap_limit: Optional[Union[float, str]] = None
    network_mode: Optional[str] = None
    networks: Optional[Union[ListOfStrings, Dict[str, Optional[Networks]]]] = Field(
        None,
        description="The service will be included in these networks, allowing it to reach other containers on the same network",
    )
    oom_kill_disable: Optional[Union[bool, str]] = None
    oom_score_adj: Optional[Union[str, OomScoreAdj]] = None
    pid: Optional[str] = None
    pids_limit: Optional[Union[float, str]] = None
    platform: Optional[str] = None
    ports: Optional[List[Union[float, str, Ports]]] = Field(None, description="Ports that will be exposed to the host")
    post_start: Optional[List[ServiceHook]] = None
    pre_stop: Optional[List[ServiceHook]] = None
    privileged: Optional[Union[bool, str]] = None
    profiles: Optional[ListOfStrings] = Field(
        None,
        description="Profiles that this service is a part of. When the profile is started, this service will be started.",
    )
    pull_policy: Optional[str] = Field(
        None,
        pattern="always|never|build|if_not_present|missing|refresh|daily|weekly|every_([0-9]+[wdhms])+",
    )
    pull_refresh_after: Optional[str] = None
    read_only: Optional[Union[bool, str]] = None
    restart: Optional[str] = None
    runtime: Optional[str] = None
    scale: Optional[Union[int, str]] = None
    security_opt: Optional[List[str]] = None
    shm_size: Optional[Union[float, str]] = None
    secrets: Optional[ServiceConfigOrSecret] = Field(None, description="Secrets the service will have access to")
    sysctls: Optional[ListOrDict] = None
    stdin_open: Optional[Union[bool, str]] = None
    stop_grace_period: Optional[str] = None
    stop_signal: Optional[str] = None
    storage_opt: Optional[Dict[str, Any]] = None
    tmpfs: Optional[StringOrList] = None
    tty: Optional[Union[bool, str]] = None
    ulimits: Optional[Ulimits] = None
    user: Optional[str] = Field(
        None,
        description="The username under which the app in the container will be started",
    )
    uts: Optional[str] = None
    userns_mode: Optional[str] = None
    volumes: Optional[List[Union[str, Volumes]]] = Field(
        None,
        description="Named volumes and paths on the host mapped to paths in the container",
    )
    volumes_from: Optional[List[str]] = None
    working_dir: Optional[str] = Field(
        None,
        description="The working directory in which the entrypoint or command will be run",
    )


class ComposeSpecification(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    version: Optional[str] = Field(None, description="declared for backward compatibility, ignored.")
    name: Optional[str] = Field(
        None,
        description="define the Compose project name, until user defines one explicitly.",
    )
    include: Optional[List[Include]] = Field(None, description="compose sub-projects to be included.")
    services: Optional[Dict[str, Service]] = Field(None, description="The services in your project")
    networks: Optional[Dict[str, Optional[Network]]] = Field(
        None, description="Networks that are shared among multiple services"
    )
    volumes: Optional[Dict[str, Optional[Volume]]] = Field(
        None, description="Named volumes that are shared among multiple services"
    )
    secrets: Optional[Dict[str, Secret]] = Field(None, description="Secrets that are shared among multiple services")
    configs: Optional[Dict[str, Config]] = Field(None, description="Configurations for services in the project")
